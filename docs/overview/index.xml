<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview List on</title><link>https://memoria-framework.dev/docs/overview/</link><description>Recent content in Overview List on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://memoria-framework.dev/docs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Memoria</title><link>https://memoria-framework.dev/docs/overview/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/introduction/</guid><description>Data dominates. If you&amp;rsquo;ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.
&amp;ndash; Rob Pike in “Notes on Programming in C”, 1989.
What Memoria is Memoria is a full-stack data engineering framework aiming at exploiting inherent structure in data at all scales, starting form bare fabric or reality and ending at high-level visualizations.</description></item><item><title>Basic Definitions</title><link>https://memoria-framework.dev/docs/overview/definitions/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/definitions/</guid><description>Below there are few definitions that ware used intensively throughout the docs.
Data Structure Container Store Dataflow Single Writter Mutiple Readers (SWMR) Multiple Writers Multiple Readers (MWMR)</description></item><item><title>Why C++</title><link>https://memoria-framework.dev/docs/overview/whyc++/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/whyc++/</guid><description>Memoria is using C++ as its main development language and it&amp;rsquo;s a deliberate decision. This document explains what C++ gives to data platforms and how optimal language and run-time environment might look like.
From set-theoretic perspective there are much more data structures than algorithms, this is the reason why generic programming (GP) support is important for any modern programming language. The same linear search algorithm can be applied to the great variety of physical data layouts and types.</description></item><item><title>Hardware Acceleration in Memoria</title><link>https://memoria-framework.dev/docs/overview/hardware-accel/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/hardware-accel/</guid><description>Introduction Memoria was started back in 2007 after the motivation from the book What Every Programmer Should Know About Memory by Ulrich Drepper. The idea is simple. DRAM is very slow on the random access relative to CPU speed, and while waiting for the data from memory, a CPU can perform a lot of operations. By optimizing the data layout in memory, we can reduce waiting time, improving performance. But the price is &amp;ndash; greater number of instruction, performed on such memory-optimized data layout.</description></item><item><title>QT Creator Instructions</title><link>https://memoria-framework.dev/docs/overview/qt_creator_instructions/</link><pubDate>Wed, 06 Jul 2022 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/qt_creator_instructions/</guid><description>Build and install VCPkg for Memoria $ git clone https://github.com/victor-smirnov/vcpkg-memoria.git $ cd vcpkg-memoria $ git checkout memoria-libs For now, supporting compiler is Clang. Gcc 10/11/12 are crashing on Memoria.
Configuring VCPkg&amp;rsquo;s provided cmake tool In Options/Kits/Cmake tab add another cmake configuration by specifying full path VCPkg&amp;rsquo;s own cmake distribution.
Configure Required clang compiler Memoria currently is built with clang compiler version 6.0 or newer. If you system already provides it, like most Linux distributions do, then this step is unnecessary.</description></item><item><title>FAQ</title><link>https://memoria-framework.dev/docs/overview/faq/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/faq/</guid><description/></item></channel></rss>