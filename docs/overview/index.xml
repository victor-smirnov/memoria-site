<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview List on</title><link>https://memoria-framework.dev/docs/overview/</link><description>Recent content in Overview List on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://memoria-framework.dev/docs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Memoria</title><link>https://memoria-framework.dev/docs/overview/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/introduction/</guid><description>Data dominates. If you&amp;rsquo;ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.
&amp;ndash; Rob Pike in “Notes on Programming in C”, 1989.
Memoria started back in 2007 out of a need of having a memory-efficient multi-dimensional spatial tree for function approximation, lake this one. Contrary to traditional approaches for function approximation, like neural networks, spatial trees have much smaller computational complexity (logarithmic on average) for inference and allow computing partial and inverse functions out of the same set of parameters.</description></item><item><title>Hermes</title><link>https://memoria-framework.dev/docs/overview/hermes/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/hermes/</guid><description>TBD</description></item><item><title>Containers</title><link>https://memoria-framework.dev/docs/overview/containers/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/containers/</guid><description>TBD</description></item><item><title>Storage Engines</title><link>https://memoria-framework.dev/docs/overview/storage/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/storage/</guid><description>TBD</description></item><item><title>DSL &amp; VM</title><link>https://memoria-framework.dev/docs/overview/vm/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/vm/</guid><description>TBD</description></item><item><title>Runtime Environments</title><link>https://memoria-framework.dev/docs/overview/runtime/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/runtime/</guid><description>TBD</description></item><item><title>Memoria Build Tool</title><link>https://memoria-framework.dev/docs/overview/mbt/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/mbt/</guid><description>TBD</description></item><item><title>QT Creator Instructions</title><link>https://memoria-framework.dev/docs/overview/qt_creator_instructions/</link><pubDate>Wed, 06 Jul 2022 08:48:57 +0000</pubDate><guid>https://memoria-framework.dev/docs/overview/qt_creator_instructions/</guid><description>Build and install VCPkg for Memoria $ git clone https://github.com/victor-smirnov/vcpkg-memoria.git $ cd vcpkg-memoria $ git checkout memoria-libs For now, supporting compiler is Clang. Gcc 10/11/12 are crashing on Memoria.
Configuring VCPkg&amp;rsquo;s provided cmake tool In Options/Kits/Cmake tab add another cmake configuration by specifying full path VCPkg&amp;rsquo;s own cmake distribution.
Configure Required clang compiler Memoria currently is built with clang compiler version 6.0 or newer. If you system already provides it, like most Linux distributions do, then this step is unnecessary.</description></item></channel></rss>